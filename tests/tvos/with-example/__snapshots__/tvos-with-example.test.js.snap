// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate native React Native module for tvOS with example 1`] = `
Array [
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "message": "What is the desired native module name?",
          "name": "nativeModuleName",
          "onState": [Function],
          "type": "text",
          "validate": [Function],
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "active": "yes",
          "inactive": "no",
          "initial": false,
          "message": "Should it be a view?",
          "name": "isView",
          "onState": [Function],
          "type": "toggle",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "react-native-test-module-for-tv-os",
          "message": "What is the full module package name?",
          "name": "modulePackageName",
          "onState": [Function],
          "type": "text",
          "validate": [Function],
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": true,
          "message": "Initial package version is 1.0.0 - continue?",
          "name": "confirmation",
          "onState": [Function],
          "type": "confirm",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "",
          "message": "What is the desired native object class name prefix (can be blank)?",
          "name": "nativeObjectClassNamePrefixInput",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "NATIVETestModuleForTvOs",
          "message": "Desired object class name to use between JavaScript & native code?",
          "name": "nativeObjectClassName",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "choices": Array [
            Object {
              "selected": true,
              "title": "Android",
              "value": "android",
            },
            Object {
              "selected": true,
              "title": "iOS",
              "value": "ios",
            },
            Object {
              "disabled": true,
              "title": "Windows",
              "value": "windows",
            },
          ],
          "message": "Which native platforms?",
          "min": 1,
          "name": "platforms",
          "onState": [Function],
          "type": "multiselect",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "com.demo",
          "message": "What is the desired Android package id?",
          "name": "androidPackageId",
          "onState": [Function],
          "type": "text",
          "validate": [Function],
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": false,
          "message": "Support Apple tvOS (requires react-native-tvos fork)?",
          "name": "tvosEnabled",
          "onState": [Function],
          "type": "confirm",
        },
      ],
    },
  },
  Object {
    "execa": Array [
      "git",
      Array [
        "config",
        "user.name",
      ],
      undefined,
    ],
  },
  Object {
    "execa": Array [
      "git",
      Array [
        "config",
        "user.email",
      ],
      undefined,
    ],
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "Alice",
          "message": "What is the author name?",
          "name": "authorName",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "alice@example.com",
          "message": "What is the author email?",
          "name": "authorEmail",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "ada",
          "message": "What is the GitHub user account name?",
          "name": "githubUserAccountName",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "MIT",
          "message": "What license?",
          "name": "license",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": false,
          "message": "Generate with sample use of Apple Networking?",
          "name": "useAppleNetworking",
          "onState": [Function],
          "type": "confirm",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": true,
          "message": "Generate the example app (with workarounds in metro.config.js)?",
          "name": "generateExampleApp",
          "onState": [Function],
          "type": "confirm",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "example",
          "message": "Example app name?",
          "name": "exampleAppName",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "prompts": Object {
      "args": Array [
        Object {
          "initial": "react-native@npm:react-native-tvos",
          "message": "What react-native template to use for the example app (should be for at least react-native@npm:react-native-tvos@0.60)?",
          "name": "exampleTemplate",
          "onState": [Function],
          "type": "text",
        },
      ],
    },
  },
  Object {
    "execa": Array [
      "react-native",
      Array [
        "--version",
      ],
      undefined,
    ],
  },
  Object {
    "execa": Array [
      "yarn",
      Array [
        "--version",
      ],
      undefined,
    ],
  },
  Object {
    "create": Object {
      "authorEmail": "ada@lovelace.name",
      "authorName": "Ada",
      "githubAccount": "ada-lovelace",
      "license": "BSD-4-CLAUSE",
      "moduleName": "react-native-tvos-test-module",
      "name": "test module for tvOS",
      "objectClassName": "SUPERTestModule",
      "packageIdentifier": "com.test",
      "platforms": Array [
        "android",
        "ios",
      ],
      "tvosEnabled": true,
      "useAppleNetworking": false,
      "view": false,
    },
  },
  Object {
    "reactNativeInit": Array [
      Array [
        "example",
      ],
      Object {
        "directory": "react-native-tvos-test-module/example",
        "template": "react-native-tvos@latest",
      },
    ],
  },
  Object {
    "outputFile": Object {
      "filePath": "/home/ada.lovelace/path_resolved_from/react-native-tvos-test-module/example/App.js",
      "outputContents": "/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import { Platform, StyleSheet, Text, View } from 'react-native';
import SUPERTestModule from 'react-native-tvos-test-module';

export default class App extends Component<{}> {
  state = {
    status: 'starting',
    message: '--'
  };
  componentDidMount() {
    SUPERTestModule.sampleMethod('Testing', 123, (message) => {
      this.setState({
        status: 'native callback received',
        message
      });
    });
  }
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆SUPERTestModule example☆</Text>
        <Text style={styles.instructions}>STATUS: {this.state.status}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK MESSAGE☆</Text>
        <Text style={styles.instructions}>{this.state.message}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
",
    },
  },
  Object {
    "outputFile": Object {
      "filePath": "/home/ada.lovelace/path_resolved_from/react-native-tvos-test-module/example/metro.config.js",
      "outputContents": "// metro.config.js
// with workaround solutions

const path = require('path')

module.exports = {
  // workaround for issue with symlinks encountered starting with
  // metro@0.55 / React Native 0.61
  // (not needed with React Native 0.60 / metro@0.54)
  resolver: {
    extraNodeModules: new Proxy(
      {},
      { get: (_, name) => path.resolve('.', 'node_modules', name) }
    )
  },

  // quick workaround solution for issue with symlinked modules ref:
  // https://github.com/brodybits/create-react-native-module/issues/232
  watchFolders: ['.', '..']
}
",
    },
  },
  Object {
    "execa": Array [
      "yarn",
      Array [
        "add",
        "link:../",
      ],
      Object {
        "cwd": "/home/ada.lovelace/path_resolved_from/react-native-tvos-test-module/example",
        "stderr": "inherit",
        "stdout": "inherit",
      },
    ],
  },
  Object {
    "execa": Array [
      "pod",
      Array [
        "--version",
      ],
      undefined,
    ],
  },
  Object {
    "execa": Array [
      "pod",
      Array [
        "install",
      ],
      Object {
        "cwd": "/home/ada.lovelace/path_resolved_from/react-native-tvos-test-module/example/ios",
        "stderr": "inherit",
        "stdout": "inherit",
      },
    ],
  },
]
`;
